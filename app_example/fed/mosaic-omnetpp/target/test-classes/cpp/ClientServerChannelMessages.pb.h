// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientServerChannelMessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ClientServerChannelMessages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ClientServerChannelMessages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ClientServerChannelMessages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ClientServerChannelMessages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ClientServerChannelMessages_2eproto;
namespace ClientServerChannelSpace {
class CommandMessage;
struct CommandMessageDefaultTypeInternal;
extern CommandMessageDefaultTypeInternal _CommandMessage_default_instance_;
class ConfigureRadioMessage;
struct ConfigureRadioMessageDefaultTypeInternal;
extern ConfigureRadioMessageDefaultTypeInternal _ConfigureRadioMessage_default_instance_;
class ConfigureRadioMessage_RadioConfiguration;
struct ConfigureRadioMessage_RadioConfigurationDefaultTypeInternal;
extern ConfigureRadioMessage_RadioConfigurationDefaultTypeInternal _ConfigureRadioMessage_RadioConfiguration_default_instance_;
class InitMessage;
struct InitMessageDefaultTypeInternal;
extern InitMessageDefaultTypeInternal _InitMessage_default_instance_;
class PortExchange;
struct PortExchangeDefaultTypeInternal;
extern PortExchangeDefaultTypeInternal _PortExchange_default_instance_;
class ReceiveMessage;
struct ReceiveMessageDefaultTypeInternal;
extern ReceiveMessageDefaultTypeInternal _ReceiveMessage_default_instance_;
class SendMessageMessage;
struct SendMessageMessageDefaultTypeInternal;
extern SendMessageMessageDefaultTypeInternal _SendMessageMessage_default_instance_;
class SendMessageMessage_GeoCircleAddress;
struct SendMessageMessage_GeoCircleAddressDefaultTypeInternal;
extern SendMessageMessage_GeoCircleAddressDefaultTypeInternal _SendMessageMessage_GeoCircleAddress_default_instance_;
class SendMessageMessage_GeoRectangleAddress;
struct SendMessageMessage_GeoRectangleAddressDefaultTypeInternal;
extern SendMessageMessage_GeoRectangleAddressDefaultTypeInternal _SendMessageMessage_GeoRectangleAddress_default_instance_;
class SendMessageMessage_TopoAddress;
struct SendMessageMessage_TopoAddressDefaultTypeInternal;
extern SendMessageMessage_TopoAddressDefaultTypeInternal _SendMessageMessage_TopoAddress_default_instance_;
class TimeMessage;
struct TimeMessageDefaultTypeInternal;
extern TimeMessageDefaultTypeInternal _TimeMessage_default_instance_;
class UpdateNode;
struct UpdateNodeDefaultTypeInternal;
extern UpdateNodeDefaultTypeInternal _UpdateNode_default_instance_;
class UpdateNode_NodeData;
struct UpdateNode_NodeDataDefaultTypeInternal;
extern UpdateNode_NodeDataDefaultTypeInternal _UpdateNode_NodeData_default_instance_;
}  // namespace ClientServerChannelSpace
PROTOBUF_NAMESPACE_OPEN
template <>
::ClientServerChannelSpace::CommandMessage* Arena::CreateMaybeMessage<::ClientServerChannelSpace::CommandMessage>(Arena*);
template <>
::ClientServerChannelSpace::ConfigureRadioMessage* Arena::CreateMaybeMessage<::ClientServerChannelSpace::ConfigureRadioMessage>(Arena*);
template <>
::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* Arena::CreateMaybeMessage<::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration>(Arena*);
template <>
::ClientServerChannelSpace::InitMessage* Arena::CreateMaybeMessage<::ClientServerChannelSpace::InitMessage>(Arena*);
template <>
::ClientServerChannelSpace::PortExchange* Arena::CreateMaybeMessage<::ClientServerChannelSpace::PortExchange>(Arena*);
template <>
::ClientServerChannelSpace::ReceiveMessage* Arena::CreateMaybeMessage<::ClientServerChannelSpace::ReceiveMessage>(Arena*);
template <>
::ClientServerChannelSpace::SendMessageMessage* Arena::CreateMaybeMessage<::ClientServerChannelSpace::SendMessageMessage>(Arena*);
template <>
::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* Arena::CreateMaybeMessage<::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress>(Arena*);
template <>
::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* Arena::CreateMaybeMessage<::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress>(Arena*);
template <>
::ClientServerChannelSpace::SendMessageMessage_TopoAddress* Arena::CreateMaybeMessage<::ClientServerChannelSpace::SendMessageMessage_TopoAddress>(Arena*);
template <>
::ClientServerChannelSpace::TimeMessage* Arena::CreateMaybeMessage<::ClientServerChannelSpace::TimeMessage>(Arena*);
template <>
::ClientServerChannelSpace::UpdateNode* Arena::CreateMaybeMessage<::ClientServerChannelSpace::UpdateNode>(Arena*);
template <>
::ClientServerChannelSpace::UpdateNode_NodeData* Arena::CreateMaybeMessage<::ClientServerChannelSpace::UpdateNode_NodeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ClientServerChannelSpace {
enum CommandMessage_CommandType : int {
  CommandMessage_CommandType_UNDEF = -1,
  CommandMessage_CommandType_INIT = 1,
  CommandMessage_CommandType_SHUT_DOWN = 2,
  CommandMessage_CommandType_UPDATE_NODE = 10,
  CommandMessage_CommandType_REMOVE_NODE = 11,
  CommandMessage_CommandType_ADVANCE_TIME = 20,
  CommandMessage_CommandType_NEXT_EVENT = 21,
  CommandMessage_CommandType_MSG_RECV = 22,
  CommandMessage_CommandType_MSG_SEND = 30,
  CommandMessage_CommandType_CONF_RADIO = 31,
  CommandMessage_CommandType_END = 40,
  CommandMessage_CommandType_SUCCESS = 41,
};

bool CommandMessage_CommandType_IsValid(int value);
constexpr CommandMessage_CommandType CommandMessage_CommandType_CommandType_MIN = static_cast<CommandMessage_CommandType>(-1);
constexpr CommandMessage_CommandType CommandMessage_CommandType_CommandType_MAX = static_cast<CommandMessage_CommandType>(41);
constexpr int CommandMessage_CommandType_CommandType_ARRAYSIZE = 41 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
CommandMessage_CommandType_descriptor();
template <typename T>
const std::string& CommandMessage_CommandType_Name(T value) {
  static_assert(std::is_same<T, CommandMessage_CommandType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CommandType_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(CommandMessage_CommandType_descriptor(), value);
}
inline bool CommandMessage_CommandType_Parse(absl::string_view name, CommandMessage_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandMessage_CommandType>(
      CommandMessage_CommandType_descriptor(), name, value);
}
enum UpdateNode_UpdateType : int {
  UpdateNode_UpdateType_ADD_RSU = 1,
  UpdateNode_UpdateType_ADD_VEHICLE = 2,
  UpdateNode_UpdateType_MOVE_NODE = 3,
  UpdateNode_UpdateType_REMOVE_NODE = 4,
};

bool UpdateNode_UpdateType_IsValid(int value);
constexpr UpdateNode_UpdateType UpdateNode_UpdateType_UpdateType_MIN = static_cast<UpdateNode_UpdateType>(1);
constexpr UpdateNode_UpdateType UpdateNode_UpdateType_UpdateType_MAX = static_cast<UpdateNode_UpdateType>(4);
constexpr int UpdateNode_UpdateType_UpdateType_ARRAYSIZE = 4 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
UpdateNode_UpdateType_descriptor();
template <typename T>
const std::string& UpdateNode_UpdateType_Name(T value) {
  static_assert(std::is_same<T, UpdateNode_UpdateType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateType_Name().");
  return UpdateNode_UpdateType_Name(static_cast<UpdateNode_UpdateType>(value));
}
template <>
inline const std::string& UpdateNode_UpdateType_Name(UpdateNode_UpdateType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<UpdateNode_UpdateType_descriptor,
                                                 1, 4>(
      static_cast<int>(value));
}
inline bool UpdateNode_UpdateType_Parse(absl::string_view name, UpdateNode_UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateNode_UpdateType>(
      UpdateNode_UpdateType_descriptor(), name, value);
}
enum ConfigureRadioMessage_RadioConfiguration_RadioMode : int {
  ConfigureRadioMessage_RadioConfiguration_RadioMode_SINGLE_CHANNEL = 1,
  ConfigureRadioMessage_RadioConfiguration_RadioMode_DUAL_CHANNEL = 2,
};

bool ConfigureRadioMessage_RadioConfiguration_RadioMode_IsValid(int value);
constexpr ConfigureRadioMessage_RadioConfiguration_RadioMode ConfigureRadioMessage_RadioConfiguration_RadioMode_RadioMode_MIN = static_cast<ConfigureRadioMessage_RadioConfiguration_RadioMode>(1);
constexpr ConfigureRadioMessage_RadioConfiguration_RadioMode ConfigureRadioMessage_RadioConfiguration_RadioMode_RadioMode_MAX = static_cast<ConfigureRadioMessage_RadioConfiguration_RadioMode>(2);
constexpr int ConfigureRadioMessage_RadioConfiguration_RadioMode_RadioMode_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ConfigureRadioMessage_RadioConfiguration_RadioMode_descriptor();
template <typename T>
const std::string& ConfigureRadioMessage_RadioConfiguration_RadioMode_Name(T value) {
  static_assert(std::is_same<T, ConfigureRadioMessage_RadioConfiguration_RadioMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RadioMode_Name().");
  return ConfigureRadioMessage_RadioConfiguration_RadioMode_Name(static_cast<ConfigureRadioMessage_RadioConfiguration_RadioMode>(value));
}
template <>
inline const std::string& ConfigureRadioMessage_RadioConfiguration_RadioMode_Name(ConfigureRadioMessage_RadioConfiguration_RadioMode value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ConfigureRadioMessage_RadioConfiguration_RadioMode_descriptor,
                                                 1, 2>(
      static_cast<int>(value));
}
inline bool ConfigureRadioMessage_RadioConfiguration_RadioMode_Parse(absl::string_view name, ConfigureRadioMessage_RadioConfiguration_RadioMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigureRadioMessage_RadioConfiguration_RadioMode>(
      ConfigureRadioMessage_RadioConfiguration_RadioMode_descriptor(), name, value);
}
enum ConfigureRadioMessage_RadioNumber : int {
  ConfigureRadioMessage_RadioNumber_NO_RADIO = 0,
  ConfigureRadioMessage_RadioNumber_SINGLE_RADIO = 1,
  ConfigureRadioMessage_RadioNumber_DUAL_RADIO = 2,
};

bool ConfigureRadioMessage_RadioNumber_IsValid(int value);
constexpr ConfigureRadioMessage_RadioNumber ConfigureRadioMessage_RadioNumber_RadioNumber_MIN = static_cast<ConfigureRadioMessage_RadioNumber>(0);
constexpr ConfigureRadioMessage_RadioNumber ConfigureRadioMessage_RadioNumber_RadioNumber_MAX = static_cast<ConfigureRadioMessage_RadioNumber>(2);
constexpr int ConfigureRadioMessage_RadioNumber_RadioNumber_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
ConfigureRadioMessage_RadioNumber_descriptor();
template <typename T>
const std::string& ConfigureRadioMessage_RadioNumber_Name(T value) {
  static_assert(std::is_same<T, ConfigureRadioMessage_RadioNumber>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RadioNumber_Name().");
  return ConfigureRadioMessage_RadioNumber_Name(static_cast<ConfigureRadioMessage_RadioNumber>(value));
}
template <>
inline const std::string& ConfigureRadioMessage_RadioNumber_Name(ConfigureRadioMessage_RadioNumber value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ConfigureRadioMessage_RadioNumber_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ConfigureRadioMessage_RadioNumber_Parse(absl::string_view name, ConfigureRadioMessage_RadioNumber* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigureRadioMessage_RadioNumber>(
      ConfigureRadioMessage_RadioNumber_descriptor(), name, value);
}
enum RadioChannel : int {
  PROTO_SCH1 = 0,
  PROTO_SCH2 = 1,
  PROTO_SCH3 = 2,
  PROTO_CCH = 3,
  PROTO_SCH4 = 4,
  PROTO_SCH5 = 5,
  PROTO_SCH6 = 6,
  PROTO_UNDEF = 7,
};

bool RadioChannel_IsValid(int value);
constexpr RadioChannel RadioChannel_MIN = static_cast<RadioChannel>(0);
constexpr RadioChannel RadioChannel_MAX = static_cast<RadioChannel>(7);
constexpr int RadioChannel_ARRAYSIZE = 7 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
RadioChannel_descriptor();
template <typename T>
const std::string& RadioChannel_Name(T value) {
  static_assert(std::is_same<T, RadioChannel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RadioChannel_Name().");
  return RadioChannel_Name(static_cast<RadioChannel>(value));
}
template <>
inline const std::string& RadioChannel_Name(RadioChannel value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<RadioChannel_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool RadioChannel_Parse(absl::string_view name, RadioChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RadioChannel>(
      RadioChannel_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class CommandMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.CommandMessage) */ {
 public:
  inline CommandMessage() : CommandMessage(nullptr) {}
  ~CommandMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommandMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMessage(const CommandMessage& from);
  CommandMessage(CommandMessage&& from) noexcept
    : CommandMessage() {
    *this = ::std::move(from);
  }

  inline CommandMessage& operator=(const CommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMessage& operator=(CommandMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMessage* internal_default_instance() {
    return reinterpret_cast<const CommandMessage*>(
               &_CommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandMessage& a, CommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMessage& from) {
    CommandMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.CommandMessage";
  }
  protected:
  explicit CommandMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using CommandType = CommandMessage_CommandType;
  static constexpr CommandType UNDEF = CommandMessage_CommandType_UNDEF;
  static constexpr CommandType INIT = CommandMessage_CommandType_INIT;
  static constexpr CommandType SHUT_DOWN = CommandMessage_CommandType_SHUT_DOWN;
  static constexpr CommandType UPDATE_NODE = CommandMessage_CommandType_UPDATE_NODE;
  static constexpr CommandType REMOVE_NODE = CommandMessage_CommandType_REMOVE_NODE;
  static constexpr CommandType ADVANCE_TIME = CommandMessage_CommandType_ADVANCE_TIME;
  static constexpr CommandType NEXT_EVENT = CommandMessage_CommandType_NEXT_EVENT;
  static constexpr CommandType MSG_RECV = CommandMessage_CommandType_MSG_RECV;
  static constexpr CommandType MSG_SEND = CommandMessage_CommandType_MSG_SEND;
  static constexpr CommandType CONF_RADIO = CommandMessage_CommandType_CONF_RADIO;
  static constexpr CommandType END = CommandMessage_CommandType_END;
  static constexpr CommandType SUCCESS = CommandMessage_CommandType_SUCCESS;
  static inline bool CommandType_IsValid(int value) {
    return CommandMessage_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN = CommandMessage_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX = CommandMessage_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE = CommandMessage_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor() {
    return CommandMessage_CommandType_descriptor();
  }
  template <typename T>
  static inline const std::string& CommandType_Name(T value) {
    return CommandMessage_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(absl::string_view name, CommandType* value) {
    return CommandMessage_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCommandTypeFieldNumber = 1,
  };
  // required .ClientServerChannelSpace.CommandMessage.CommandType command_type = 1;
  bool has_command_type() const;
  void clear_command_type() ;
  ::ClientServerChannelSpace::CommandMessage_CommandType command_type() const;
  void set_command_type(::ClientServerChannelSpace::CommandMessage_CommandType value);

  private:
  ::ClientServerChannelSpace::CommandMessage_CommandType _internal_command_type() const;
  void _internal_set_command_type(::ClientServerChannelSpace::CommandMessage_CommandType value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.CommandMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int command_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class UpdateNode_NodeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.UpdateNode.NodeData) */ {
 public:
  inline UpdateNode_NodeData() : UpdateNode_NodeData(nullptr) {}
  ~UpdateNode_NodeData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateNode_NodeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNode_NodeData(const UpdateNode_NodeData& from);
  UpdateNode_NodeData(UpdateNode_NodeData&& from) noexcept
    : UpdateNode_NodeData() {
    *this = ::std::move(from);
  }

  inline UpdateNode_NodeData& operator=(const UpdateNode_NodeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNode_NodeData& operator=(UpdateNode_NodeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNode_NodeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNode_NodeData* internal_default_instance() {
    return reinterpret_cast<const UpdateNode_NodeData*>(
               &_UpdateNode_NodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateNode_NodeData& a, UpdateNode_NodeData& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNode_NodeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNode_NodeData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNode_NodeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNode_NodeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNode_NodeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateNode_NodeData& from) {
    UpdateNode_NodeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNode_NodeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.UpdateNode.NodeData";
  }
  protected:
  explicit UpdateNode_NodeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // required double x = 2;
  bool has_x() const;
  void clear_x() ;
  double x() const;
  void set_x(double value);

  private:
  double _internal_x() const;
  void _internal_set_x(double value);

  public:
  // required double y = 3;
  bool has_y() const;
  void clear_y() ;
  double y() const;
  void set_y(double value);

  private:
  double _internal_y() const;
  void _internal_set_y(double value);

  public:
  // required int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.UpdateNode.NodeData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double x_;
    double y_;
    ::int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class UpdateNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.UpdateNode) */ {
 public:
  inline UpdateNode() : UpdateNode(nullptr) {}
  ~UpdateNode() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNode(const UpdateNode& from);
  UpdateNode(UpdateNode&& from) noexcept
    : UpdateNode() {
    *this = ::std::move(from);
  }

  inline UpdateNode& operator=(const UpdateNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNode& operator=(UpdateNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNode* internal_default_instance() {
    return reinterpret_cast<const UpdateNode*>(
               &_UpdateNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateNode& a, UpdateNode& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNode* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateNode& from) {
    UpdateNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.UpdateNode";
  }
  protected:
  explicit UpdateNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UpdateNode_NodeData NodeData;

  using UpdateType = UpdateNode_UpdateType;
  static constexpr UpdateType ADD_RSU = UpdateNode_UpdateType_ADD_RSU;
  static constexpr UpdateType ADD_VEHICLE = UpdateNode_UpdateType_ADD_VEHICLE;
  static constexpr UpdateType MOVE_NODE = UpdateNode_UpdateType_MOVE_NODE;
  static constexpr UpdateType REMOVE_NODE = UpdateNode_UpdateType_REMOVE_NODE;
  static inline bool UpdateType_IsValid(int value) {
    return UpdateNode_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN = UpdateNode_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX = UpdateNode_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE = UpdateNode_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateType_descriptor() {
    return UpdateNode_UpdateType_descriptor();
  }
  template <typename T>
  static inline const std::string& UpdateType_Name(T value) {
    return UpdateNode_UpdateType_Name(value);
  }
  static inline bool UpdateType_Parse(absl::string_view name, UpdateType* value) {
    return UpdateNode_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kTimeFieldNumber = 2,
    kUpdateTypeFieldNumber = 1,
  };
  // repeated .ClientServerChannelSpace.UpdateNode.NodeData properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;

  public:
  void clear_properties() ;
  ::ClientServerChannelSpace::UpdateNode_NodeData* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerChannelSpace::UpdateNode_NodeData >*
      mutable_properties();
  private:
  const ::ClientServerChannelSpace::UpdateNode_NodeData& _internal_properties(int index) const;
  ::ClientServerChannelSpace::UpdateNode_NodeData* _internal_add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ClientServerChannelSpace::UpdateNode_NodeData>& _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ClientServerChannelSpace::UpdateNode_NodeData>* _internal_mutable_properties();
  public:
  const ::ClientServerChannelSpace::UpdateNode_NodeData& properties(int index) const;
  ::ClientServerChannelSpace::UpdateNode_NodeData* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerChannelSpace::UpdateNode_NodeData >&
      properties() const;
  // required int64 time = 2;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // required .ClientServerChannelSpace.UpdateNode.UpdateType update_type = 1;
  bool has_update_type() const;
  void clear_update_type() ;
  ::ClientServerChannelSpace::UpdateNode_UpdateType update_type() const;
  void set_update_type(::ClientServerChannelSpace::UpdateNode_UpdateType value);

  private:
  ::ClientServerChannelSpace::UpdateNode_UpdateType _internal_update_type() const;
  void _internal_set_update_type(::ClientServerChannelSpace::UpdateNode_UpdateType value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.UpdateNode)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerChannelSpace::UpdateNode_NodeData > properties_;
    ::int64_t time_;
    int update_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class InitMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.InitMessage) */ {
 public:
  inline InitMessage() : InitMessage(nullptr) {}
  ~InitMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InitMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitMessage(const InitMessage& from);
  InitMessage(InitMessage&& from) noexcept
    : InitMessage() {
    *this = ::std::move(from);
  }

  inline InitMessage& operator=(const InitMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitMessage& operator=(InitMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitMessage* internal_default_instance() {
    return reinterpret_cast<const InitMessage*>(
               &_InitMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitMessage& a, InitMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitMessage& from) {
    InitMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.InitMessage";
  }
  protected:
  explicit InitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // required int64 start_time = 1;
  bool has_start_time() const;
  void clear_start_time() ;
  ::int64_t start_time() const;
  void set_start_time(::int64_t value);

  private:
  ::int64_t _internal_start_time() const;
  void _internal_set_start_time(::int64_t value);

  public:
  // required int64 end_time = 2;
  bool has_end_time() const;
  void clear_end_time() ;
  ::int64_t end_time() const;
  void set_end_time(::int64_t value);

  private:
  ::int64_t _internal_end_time() const;
  void _internal_set_end_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.InitMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t start_time_;
    ::int64_t end_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class PortExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.PortExchange) */ {
 public:
  inline PortExchange() : PortExchange(nullptr) {}
  ~PortExchange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PortExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortExchange(const PortExchange& from);
  PortExchange(PortExchange&& from) noexcept
    : PortExchange() {
    *this = ::std::move(from);
  }

  inline PortExchange& operator=(const PortExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortExchange& operator=(PortExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortExchange* internal_default_instance() {
    return reinterpret_cast<const PortExchange*>(
               &_PortExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PortExchange& a, PortExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(PortExchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortExchange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PortExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PortExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PortExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PortExchange& from) {
    PortExchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortExchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.PortExchange";
  }
  protected:
  explicit PortExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortNumberFieldNumber = 1,
  };
  // required uint32 port_number = 1;
  bool has_port_number() const;
  void clear_port_number() ;
  ::uint32_t port_number() const;
  void set_port_number(::uint32_t value);

  private:
  ::uint32_t _internal_port_number() const;
  void _internal_set_port_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.PortExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t port_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class TimeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.TimeMessage) */ {
 public:
  inline TimeMessage() : TimeMessage(nullptr) {}
  ~TimeMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeMessage(const TimeMessage& from);
  TimeMessage(TimeMessage&& from) noexcept
    : TimeMessage() {
    *this = ::std::move(from);
  }

  inline TimeMessage& operator=(const TimeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeMessage& operator=(TimeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeMessage* internal_default_instance() {
    return reinterpret_cast<const TimeMessage*>(
               &_TimeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimeMessage& a, TimeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeMessage& from) {
    TimeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.TimeMessage";
  }
  protected:
  explicit TimeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // required int64 time = 1;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.TimeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class ReceiveMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.ReceiveMessage) */ {
 public:
  inline ReceiveMessage() : ReceiveMessage(nullptr) {}
  ~ReceiveMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReceiveMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveMessage(const ReceiveMessage& from);
  ReceiveMessage(ReceiveMessage&& from) noexcept
    : ReceiveMessage() {
    *this = ::std::move(from);
  }

  inline ReceiveMessage& operator=(const ReceiveMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveMessage& operator=(ReceiveMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveMessage* internal_default_instance() {
    return reinterpret_cast<const ReceiveMessage*>(
               &_ReceiveMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReceiveMessage& a, ReceiveMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveMessage& from) {
    ReceiveMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.ReceiveMessage";
  }
  protected:
  explicit ReceiveMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kMessageIdFieldNumber = 4,
    kRssiFieldNumber = 5,
  };
  // required int64 time = 1;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // required uint32 node_id = 2;
  bool has_node_id() const;
  void clear_node_id() ;
  ::uint32_t node_id() const;
  void set_node_id(::uint32_t value);

  private:
  ::uint32_t _internal_node_id() const;
  void _internal_set_node_id(::uint32_t value);

  public:
  // required .ClientServerChannelSpace.RadioChannel channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id() ;
  ::ClientServerChannelSpace::RadioChannel channel_id() const;
  void set_channel_id(::ClientServerChannelSpace::RadioChannel value);

  private:
  ::ClientServerChannelSpace::RadioChannel _internal_channel_id() const;
  void _internal_set_channel_id(::ClientServerChannelSpace::RadioChannel value);

  public:
  // required uint32 message_id = 4;
  bool has_message_id() const;
  void clear_message_id() ;
  ::uint32_t message_id() const;
  void set_message_id(::uint32_t value);

  private:
  ::uint32_t _internal_message_id() const;
  void _internal_set_message_id(::uint32_t value);

  public:
  // required float rssi = 5;
  bool has_rssi() const;
  void clear_rssi() ;
  float rssi() const;
  void set_rssi(float value);

  private:
  float _internal_rssi() const;
  void _internal_set_rssi(float value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.ReceiveMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t time_;
    ::uint32_t node_id_;
    int channel_id_;
    ::uint32_t message_id_;
    float rssi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class ConfigureRadioMessage_RadioConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration) */ {
 public:
  inline ConfigureRadioMessage_RadioConfiguration() : ConfigureRadioMessage_RadioConfiguration(nullptr) {}
  ~ConfigureRadioMessage_RadioConfiguration() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigureRadioMessage_RadioConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureRadioMessage_RadioConfiguration(const ConfigureRadioMessage_RadioConfiguration& from);
  ConfigureRadioMessage_RadioConfiguration(ConfigureRadioMessage_RadioConfiguration&& from) noexcept
    : ConfigureRadioMessage_RadioConfiguration() {
    *this = ::std::move(from);
  }

  inline ConfigureRadioMessage_RadioConfiguration& operator=(const ConfigureRadioMessage_RadioConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureRadioMessage_RadioConfiguration& operator=(ConfigureRadioMessage_RadioConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigureRadioMessage_RadioConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureRadioMessage_RadioConfiguration* internal_default_instance() {
    return reinterpret_cast<const ConfigureRadioMessage_RadioConfiguration*>(
               &_ConfigureRadioMessage_RadioConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConfigureRadioMessage_RadioConfiguration& a, ConfigureRadioMessage_RadioConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureRadioMessage_RadioConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureRadioMessage_RadioConfiguration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigureRadioMessage_RadioConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigureRadioMessage_RadioConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigureRadioMessage_RadioConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigureRadioMessage_RadioConfiguration& from) {
    ConfigureRadioMessage_RadioConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureRadioMessage_RadioConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration";
  }
  protected:
  explicit ConfigureRadioMessage_RadioConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using RadioMode = ConfigureRadioMessage_RadioConfiguration_RadioMode;
  static constexpr RadioMode SINGLE_CHANNEL = ConfigureRadioMessage_RadioConfiguration_RadioMode_SINGLE_CHANNEL;
  static constexpr RadioMode DUAL_CHANNEL = ConfigureRadioMessage_RadioConfiguration_RadioMode_DUAL_CHANNEL;
  static inline bool RadioMode_IsValid(int value) {
    return ConfigureRadioMessage_RadioConfiguration_RadioMode_IsValid(value);
  }
  static constexpr RadioMode RadioMode_MIN = ConfigureRadioMessage_RadioConfiguration_RadioMode_RadioMode_MIN;
  static constexpr RadioMode RadioMode_MAX = ConfigureRadioMessage_RadioConfiguration_RadioMode_RadioMode_MAX;
  static constexpr int RadioMode_ARRAYSIZE = ConfigureRadioMessage_RadioConfiguration_RadioMode_RadioMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadioMode_descriptor() {
    return ConfigureRadioMessage_RadioConfiguration_RadioMode_descriptor();
  }
  template <typename T>
  static inline const std::string& RadioMode_Name(T value) {
    return ConfigureRadioMessage_RadioConfiguration_RadioMode_Name(value);
  }
  static inline bool RadioMode_Parse(absl::string_view name, RadioMode* value) {
    return ConfigureRadioMessage_RadioConfiguration_RadioMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReceivingMessagesFieldNumber = 1,
    kIpAddressFieldNumber = 2,
    kTransmissionPowerFieldNumber = 4,
    kSubnetAddressFieldNumber = 3,
    kPrimaryRadioChannelFieldNumber = 6,
    kSecondaryRadioChannelFieldNumber = 7,
    kRadioModeFieldNumber = 5,
  };
  // required bool receiving_messages = 1;
  bool has_receiving_messages() const;
  void clear_receiving_messages() ;
  bool receiving_messages() const;
  void set_receiving_messages(bool value);

  private:
  bool _internal_receiving_messages() const;
  void _internal_set_receiving_messages(bool value);

  public:
  // required uint32 ip_address = 2;
  bool has_ip_address() const;
  void clear_ip_address() ;
  ::uint32_t ip_address() const;
  void set_ip_address(::uint32_t value);

  private:
  ::uint32_t _internal_ip_address() const;
  void _internal_set_ip_address(::uint32_t value);

  public:
  // required double transmission_power = 4;
  bool has_transmission_power() const;
  void clear_transmission_power() ;
  double transmission_power() const;
  void set_transmission_power(double value);

  private:
  double _internal_transmission_power() const;
  void _internal_set_transmission_power(double value);

  public:
  // required uint32 subnet_address = 3;
  bool has_subnet_address() const;
  void clear_subnet_address() ;
  ::uint32_t subnet_address() const;
  void set_subnet_address(::uint32_t value);

  private:
  ::uint32_t _internal_subnet_address() const;
  void _internal_set_subnet_address(::uint32_t value);

  public:
  // required .ClientServerChannelSpace.RadioChannel primary_radio_channel = 6;
  bool has_primary_radio_channel() const;
  void clear_primary_radio_channel() ;
  ::ClientServerChannelSpace::RadioChannel primary_radio_channel() const;
  void set_primary_radio_channel(::ClientServerChannelSpace::RadioChannel value);

  private:
  ::ClientServerChannelSpace::RadioChannel _internal_primary_radio_channel() const;
  void _internal_set_primary_radio_channel(::ClientServerChannelSpace::RadioChannel value);

  public:
  // optional .ClientServerChannelSpace.RadioChannel secondary_radio_channel = 7;
  bool has_secondary_radio_channel() const;
  void clear_secondary_radio_channel() ;
  ::ClientServerChannelSpace::RadioChannel secondary_radio_channel() const;
  void set_secondary_radio_channel(::ClientServerChannelSpace::RadioChannel value);

  private:
  ::ClientServerChannelSpace::RadioChannel _internal_secondary_radio_channel() const;
  void _internal_set_secondary_radio_channel(::ClientServerChannelSpace::RadioChannel value);

  public:
  // required .ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.RadioMode radio_mode = 5;
  bool has_radio_mode() const;
  void clear_radio_mode() ;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode radio_mode() const;
  void set_radio_mode(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode value);

  private:
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode _internal_radio_mode() const;
  void _internal_set_radio_mode(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool receiving_messages_;
    ::uint32_t ip_address_;
    double transmission_power_;
    ::uint32_t subnet_address_;
    int primary_radio_channel_;
    int secondary_radio_channel_;
    int radio_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class ConfigureRadioMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.ConfigureRadioMessage) */ {
 public:
  inline ConfigureRadioMessage() : ConfigureRadioMessage(nullptr) {}
  ~ConfigureRadioMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConfigureRadioMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigureRadioMessage(const ConfigureRadioMessage& from);
  ConfigureRadioMessage(ConfigureRadioMessage&& from) noexcept
    : ConfigureRadioMessage() {
    *this = ::std::move(from);
  }

  inline ConfigureRadioMessage& operator=(const ConfigureRadioMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigureRadioMessage& operator=(ConfigureRadioMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigureRadioMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigureRadioMessage* internal_default_instance() {
    return reinterpret_cast<const ConfigureRadioMessage*>(
               &_ConfigureRadioMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfigureRadioMessage& a, ConfigureRadioMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigureRadioMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigureRadioMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigureRadioMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigureRadioMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigureRadioMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigureRadioMessage& from) {
    ConfigureRadioMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigureRadioMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.ConfigureRadioMessage";
  }
  protected:
  explicit ConfigureRadioMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigureRadioMessage_RadioConfiguration RadioConfiguration;

  using RadioNumber = ConfigureRadioMessage_RadioNumber;
  static constexpr RadioNumber NO_RADIO = ConfigureRadioMessage_RadioNumber_NO_RADIO;
  static constexpr RadioNumber SINGLE_RADIO = ConfigureRadioMessage_RadioNumber_SINGLE_RADIO;
  static constexpr RadioNumber DUAL_RADIO = ConfigureRadioMessage_RadioNumber_DUAL_RADIO;
  static inline bool RadioNumber_IsValid(int value) {
    return ConfigureRadioMessage_RadioNumber_IsValid(value);
  }
  static constexpr RadioNumber RadioNumber_MIN = ConfigureRadioMessage_RadioNumber_RadioNumber_MIN;
  static constexpr RadioNumber RadioNumber_MAX = ConfigureRadioMessage_RadioNumber_RadioNumber_MAX;
  static constexpr int RadioNumber_ARRAYSIZE = ConfigureRadioMessage_RadioNumber_RadioNumber_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadioNumber_descriptor() {
    return ConfigureRadioMessage_RadioNumber_descriptor();
  }
  template <typename T>
  static inline const std::string& RadioNumber_Name(T value) {
    return ConfigureRadioMessage_RadioNumber_Name(value);
  }
  static inline bool RadioNumber_Parse(absl::string_view name, RadioNumber* value) {
    return ConfigureRadioMessage_RadioNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrimaryRadioConfigurationFieldNumber = 5,
    kSecondaryRadioConfigurationFieldNumber = 6,
    kTimeFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kExternalIdFieldNumber = 3,
    kRadioNumberFieldNumber = 4,
  };
  // required .ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration primary_radio_configuration = 5;
  bool has_primary_radio_configuration() const;
  void clear_primary_radio_configuration() ;
  const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& primary_radio_configuration() const;
  PROTOBUF_NODISCARD ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* release_primary_radio_configuration();
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* mutable_primary_radio_configuration();
  void set_allocated_primary_radio_configuration(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* primary_radio_configuration);
  private:
  const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& _internal_primary_radio_configuration() const;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* _internal_mutable_primary_radio_configuration();
  public:
  void unsafe_arena_set_allocated_primary_radio_configuration(
      ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* primary_radio_configuration);
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* unsafe_arena_release_primary_radio_configuration();
  // optional .ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration secondary_radio_configuration = 6;
  bool has_secondary_radio_configuration() const;
  void clear_secondary_radio_configuration() ;
  const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& secondary_radio_configuration() const;
  PROTOBUF_NODISCARD ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* release_secondary_radio_configuration();
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* mutable_secondary_radio_configuration();
  void set_allocated_secondary_radio_configuration(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* secondary_radio_configuration);
  private:
  const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& _internal_secondary_radio_configuration() const;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* _internal_mutable_secondary_radio_configuration();
  public:
  void unsafe_arena_set_allocated_secondary_radio_configuration(
      ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* secondary_radio_configuration);
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* unsafe_arena_release_secondary_radio_configuration();
  // required int64 time = 1;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // required uint32 message_id = 2;
  bool has_message_id() const;
  void clear_message_id() ;
  ::uint32_t message_id() const;
  void set_message_id(::uint32_t value);

  private:
  ::uint32_t _internal_message_id() const;
  void _internal_set_message_id(::uint32_t value);

  public:
  // required uint32 external_id = 3;
  bool has_external_id() const;
  void clear_external_id() ;
  ::uint32_t external_id() const;
  void set_external_id(::uint32_t value);

  private:
  ::uint32_t _internal_external_id() const;
  void _internal_set_external_id(::uint32_t value);

  public:
  // required .ClientServerChannelSpace.ConfigureRadioMessage.RadioNumber radio_number = 4;
  bool has_radio_number() const;
  void clear_radio_number() ;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber radio_number() const;
  void set_radio_number(::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber value);

  private:
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber _internal_radio_number() const;
  void _internal_set_radio_number(::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.ConfigureRadioMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* primary_radio_configuration_;
    ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* secondary_radio_configuration_;
    ::int64_t time_;
    ::uint32_t message_id_;
    ::uint32_t external_id_;
    int radio_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class SendMessageMessage_TopoAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.SendMessageMessage.TopoAddress) */ {
 public:
  inline SendMessageMessage_TopoAddress() : SendMessageMessage_TopoAddress(nullptr) {}
  ~SendMessageMessage_TopoAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageMessage_TopoAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageMessage_TopoAddress(const SendMessageMessage_TopoAddress& from);
  SendMessageMessage_TopoAddress(SendMessageMessage_TopoAddress&& from) noexcept
    : SendMessageMessage_TopoAddress() {
    *this = ::std::move(from);
  }

  inline SendMessageMessage_TopoAddress& operator=(const SendMessageMessage_TopoAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageMessage_TopoAddress& operator=(SendMessageMessage_TopoAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageMessage_TopoAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageMessage_TopoAddress* internal_default_instance() {
    return reinterpret_cast<const SendMessageMessage_TopoAddress*>(
               &_SendMessageMessage_TopoAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SendMessageMessage_TopoAddress& a, SendMessageMessage_TopoAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageMessage_TopoAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageMessage_TopoAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageMessage_TopoAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessageMessage_TopoAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessageMessage_TopoAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessageMessage_TopoAddress& from) {
    SendMessageMessage_TopoAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageMessage_TopoAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.SendMessageMessage.TopoAddress";
  }
  protected:
  explicit SendMessageMessage_TopoAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kTtlFieldNumber = 2,
  };
  // required uint32 ip_address = 1;
  bool has_ip_address() const;
  void clear_ip_address() ;
  ::uint32_t ip_address() const;
  void set_ip_address(::uint32_t value);

  private:
  ::uint32_t _internal_ip_address() const;
  void _internal_set_ip_address(::uint32_t value);

  public:
  // required uint32 ttl = 2;
  bool has_ttl() const;
  void clear_ttl() ;
  ::uint32_t ttl() const;
  void set_ttl(::uint32_t value);

  private:
  ::uint32_t _internal_ttl() const;
  void _internal_set_ttl(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.SendMessageMessage.TopoAddress)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t ip_address_;
    ::uint32_t ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class SendMessageMessage_GeoRectangleAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress) */ {
 public:
  inline SendMessageMessage_GeoRectangleAddress() : SendMessageMessage_GeoRectangleAddress(nullptr) {}
  ~SendMessageMessage_GeoRectangleAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageMessage_GeoRectangleAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageMessage_GeoRectangleAddress(const SendMessageMessage_GeoRectangleAddress& from);
  SendMessageMessage_GeoRectangleAddress(SendMessageMessage_GeoRectangleAddress&& from) noexcept
    : SendMessageMessage_GeoRectangleAddress() {
    *this = ::std::move(from);
  }

  inline SendMessageMessage_GeoRectangleAddress& operator=(const SendMessageMessage_GeoRectangleAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageMessage_GeoRectangleAddress& operator=(SendMessageMessage_GeoRectangleAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageMessage_GeoRectangleAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageMessage_GeoRectangleAddress* internal_default_instance() {
    return reinterpret_cast<const SendMessageMessage_GeoRectangleAddress*>(
               &_SendMessageMessage_GeoRectangleAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SendMessageMessage_GeoRectangleAddress& a, SendMessageMessage_GeoRectangleAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageMessage_GeoRectangleAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageMessage_GeoRectangleAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageMessage_GeoRectangleAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessageMessage_GeoRectangleAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessageMessage_GeoRectangleAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessageMessage_GeoRectangleAddress& from) {
    SendMessageMessage_GeoRectangleAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageMessage_GeoRectangleAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress";
  }
  protected:
  explicit SendMessageMessage_GeoRectangleAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAXFieldNumber = 2,
    kAYFieldNumber = 3,
    kBXFieldNumber = 4,
    kBYFieldNumber = 5,
    kIpAddressFieldNumber = 1,
  };
  // required double a_X = 2;
  bool has_a_x() const;
  void clear_a_x() ;
  double a_x() const;
  void set_a_x(double value);

  private:
  double _internal_a_x() const;
  void _internal_set_a_x(double value);

  public:
  // required double a_Y = 3;
  bool has_a_y() const;
  void clear_a_y() ;
  double a_y() const;
  void set_a_y(double value);

  private:
  double _internal_a_y() const;
  void _internal_set_a_y(double value);

  public:
  // required double b_X = 4;
  bool has_b_x() const;
  void clear_b_x() ;
  double b_x() const;
  void set_b_x(double value);

  private:
  double _internal_b_x() const;
  void _internal_set_b_x(double value);

  public:
  // required double b_Y = 5;
  bool has_b_y() const;
  void clear_b_y() ;
  double b_y() const;
  void set_b_y(double value);

  private:
  double _internal_b_y() const;
  void _internal_set_b_y(double value);

  public:
  // required uint32 ip_address = 1;
  bool has_ip_address() const;
  void clear_ip_address() ;
  ::uint32_t ip_address() const;
  void set_ip_address(::uint32_t value);

  private:
  ::uint32_t _internal_ip_address() const;
  void _internal_set_ip_address(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double a_x_;
    double a_y_;
    double b_x_;
    double b_y_;
    ::uint32_t ip_address_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class SendMessageMessage_GeoCircleAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress) */ {
 public:
  inline SendMessageMessage_GeoCircleAddress() : SendMessageMessage_GeoCircleAddress(nullptr) {}
  ~SendMessageMessage_GeoCircleAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageMessage_GeoCircleAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageMessage_GeoCircleAddress(const SendMessageMessage_GeoCircleAddress& from);
  SendMessageMessage_GeoCircleAddress(SendMessageMessage_GeoCircleAddress&& from) noexcept
    : SendMessageMessage_GeoCircleAddress() {
    *this = ::std::move(from);
  }

  inline SendMessageMessage_GeoCircleAddress& operator=(const SendMessageMessage_GeoCircleAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageMessage_GeoCircleAddress& operator=(SendMessageMessage_GeoCircleAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageMessage_GeoCircleAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendMessageMessage_GeoCircleAddress* internal_default_instance() {
    return reinterpret_cast<const SendMessageMessage_GeoCircleAddress*>(
               &_SendMessageMessage_GeoCircleAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SendMessageMessage_GeoCircleAddress& a, SendMessageMessage_GeoCircleAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageMessage_GeoCircleAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageMessage_GeoCircleAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageMessage_GeoCircleAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessageMessage_GeoCircleAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessageMessage_GeoCircleAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessageMessage_GeoCircleAddress& from) {
    SendMessageMessage_GeoCircleAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageMessage_GeoCircleAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress";
  }
  protected:
  explicit SendMessageMessage_GeoCircleAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterXFieldNumber = 2,
    kCenterYFieldNumber = 3,
    kRadiusFieldNumber = 4,
    kIpAddressFieldNumber = 1,
  };
  // required double center_X = 2;
  bool has_center_x() const;
  void clear_center_x() ;
  double center_x() const;
  void set_center_x(double value);

  private:
  double _internal_center_x() const;
  void _internal_set_center_x(double value);

  public:
  // required double center_Y = 3;
  bool has_center_y() const;
  void clear_center_y() ;
  double center_y() const;
  void set_center_y(double value);

  private:
  double _internal_center_y() const;
  void _internal_set_center_y(double value);

  public:
  // required double radius = 4;
  bool has_radius() const;
  void clear_radius() ;
  double radius() const;
  void set_radius(double value);

  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);

  public:
  // required uint32 ip_address = 1;
  bool has_ip_address() const;
  void clear_ip_address() ;
  ::uint32_t ip_address() const;
  void set_ip_address(::uint32_t value);

  private:
  ::uint32_t _internal_ip_address() const;
  void _internal_set_ip_address(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double center_x_;
    double center_y_;
    double radius_;
    ::uint32_t ip_address_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};// -------------------------------------------------------------------

class SendMessageMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientServerChannelSpace.SendMessageMessage) */ {
 public:
  inline SendMessageMessage() : SendMessageMessage(nullptr) {}
  ~SendMessageMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SendMessageMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendMessageMessage(const SendMessageMessage& from);
  SendMessageMessage(SendMessageMessage&& from) noexcept
    : SendMessageMessage() {
    *this = ::std::move(from);
  }

  inline SendMessageMessage& operator=(const SendMessageMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageMessage& operator=(SendMessageMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendMessageMessage& default_instance() {
    return *internal_default_instance();
  }
  enum AddressCase {
    kTopoAddress = 6,
    kRectangleAddress = 7,
    kCircleAddress = 8,
    ADDRESS_NOT_SET = 0,
  };

  static inline const SendMessageMessage* internal_default_instance() {
    return reinterpret_cast<const SendMessageMessage*>(
               &_SendMessageMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SendMessageMessage& a, SendMessageMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendMessageMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendMessageMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendMessageMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendMessageMessage& from) {
    SendMessageMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientServerChannelSpace.SendMessageMessage";
  }
  protected:
  explicit SendMessageMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SendMessageMessage_TopoAddress TopoAddress;
  typedef SendMessageMessage_GeoRectangleAddress GeoRectangleAddress;
  typedef SendMessageMessage_GeoCircleAddress GeoCircleAddress;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kNodeIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kLengthFieldNumber = 5,
    kMessageIdFieldNumber = 4,
    kTopoAddressFieldNumber = 6,
    kRectangleAddressFieldNumber = 7,
    kCircleAddressFieldNumber = 8,
  };
  // required int64 time = 1;
  bool has_time() const;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // required uint32 node_id = 2;
  bool has_node_id() const;
  void clear_node_id() ;
  ::uint32_t node_id() const;
  void set_node_id(::uint32_t value);

  private:
  ::uint32_t _internal_node_id() const;
  void _internal_set_node_id(::uint32_t value);

  public:
  // required .ClientServerChannelSpace.RadioChannel channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id() ;
  ::ClientServerChannelSpace::RadioChannel channel_id() const;
  void set_channel_id(::ClientServerChannelSpace::RadioChannel value);

  private:
  ::ClientServerChannelSpace::RadioChannel _internal_channel_id() const;
  void _internal_set_channel_id(::ClientServerChannelSpace::RadioChannel value);

  public:
  // required uint64 length = 5;
  bool has_length() const;
  void clear_length() ;
  ::uint64_t length() const;
  void set_length(::uint64_t value);

  private:
  ::uint64_t _internal_length() const;
  void _internal_set_length(::uint64_t value);

  public:
  // required uint32 message_id = 4;
  bool has_message_id() const;
  void clear_message_id() ;
  ::uint32_t message_id() const;
  void set_message_id(::uint32_t value);

  private:
  ::uint32_t _internal_message_id() const;
  void _internal_set_message_id(::uint32_t value);

  public:
  // .ClientServerChannelSpace.SendMessageMessage.TopoAddress topo_address = 6;
  bool has_topo_address() const;
  private:
  bool _internal_has_topo_address() const;

  public:
  void clear_topo_address() ;
  const ::ClientServerChannelSpace::SendMessageMessage_TopoAddress& topo_address() const;
  PROTOBUF_NODISCARD ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* release_topo_address();
  ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* mutable_topo_address();
  void set_allocated_topo_address(::ClientServerChannelSpace::SendMessageMessage_TopoAddress* topo_address);
  private:
  const ::ClientServerChannelSpace::SendMessageMessage_TopoAddress& _internal_topo_address() const;
  ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* _internal_mutable_topo_address();
  public:
  void unsafe_arena_set_allocated_topo_address(
      ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* topo_address);
  ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* unsafe_arena_release_topo_address();
  // .ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress rectangle_address = 7;
  bool has_rectangle_address() const;
  private:
  bool _internal_has_rectangle_address() const;

  public:
  void clear_rectangle_address() ;
  const ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress& rectangle_address() const;
  PROTOBUF_NODISCARD ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* release_rectangle_address();
  ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* mutable_rectangle_address();
  void set_allocated_rectangle_address(::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* rectangle_address);
  private:
  const ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress& _internal_rectangle_address() const;
  ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* _internal_mutable_rectangle_address();
  public:
  void unsafe_arena_set_allocated_rectangle_address(
      ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* rectangle_address);
  ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* unsafe_arena_release_rectangle_address();
  // .ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress circle_address = 8;
  bool has_circle_address() const;
  private:
  bool _internal_has_circle_address() const;

  public:
  void clear_circle_address() ;
  const ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress& circle_address() const;
  PROTOBUF_NODISCARD ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* release_circle_address();
  ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* mutable_circle_address();
  void set_allocated_circle_address(::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* circle_address);
  private:
  const ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress& _internal_circle_address() const;
  ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* _internal_mutable_circle_address();
  public:
  void unsafe_arena_set_allocated_circle_address(
      ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* circle_address);
  ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* unsafe_arena_release_circle_address();
  void clear_address();
  AddressCase address_case() const;
  // @@protoc_insertion_point(class_scope:ClientServerChannelSpace.SendMessageMessage)
 private:
  class _Internal;
  void set_has_topo_address();
  void set_has_rectangle_address();
  void set_has_circle_address();

  inline bool has_address() const;
  inline void clear_has_address();

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t time_;
    ::uint32_t node_id_;
    int channel_id_;
    ::uint64_t length_;
    ::uint32_t message_id_;
    union AddressUnion {
      constexpr AddressUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* topo_address_;
      ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* rectangle_address_;
      ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* circle_address_;
    } address_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ClientServerChannelMessages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CommandMessage

// required .ClientServerChannelSpace.CommandMessage.CommandType command_type = 1;
inline bool CommandMessage::has_command_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CommandMessage::clear_command_type() {
  _impl_.command_type_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::ClientServerChannelSpace::CommandMessage_CommandType CommandMessage::command_type() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.CommandMessage.command_type)
  return _internal_command_type();
}
inline void CommandMessage::set_command_type(::ClientServerChannelSpace::CommandMessage_CommandType value) {
   _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.CommandMessage.command_type)
}
inline ::ClientServerChannelSpace::CommandMessage_CommandType CommandMessage::_internal_command_type() const {
  return static_cast<::ClientServerChannelSpace::CommandMessage_CommandType>(_impl_.command_type_);
}
inline void CommandMessage::_internal_set_command_type(::ClientServerChannelSpace::CommandMessage_CommandType value) {
  assert(::ClientServerChannelSpace::CommandMessage_CommandType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.command_type_ = value;
}

// -------------------------------------------------------------------

// UpdateNode_NodeData

// required int32 id = 1;
inline bool UpdateNode_NodeData::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UpdateNode_NodeData::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t UpdateNode_NodeData::id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.UpdateNode.NodeData.id)
  return _internal_id();
}
inline void UpdateNode_NodeData::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.UpdateNode.NodeData.id)
}
inline ::int32_t UpdateNode_NodeData::_internal_id() const {
  return _impl_.id_;
}
inline void UpdateNode_NodeData::_internal_set_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}

// required double x = 2;
inline bool UpdateNode_NodeData::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UpdateNode_NodeData::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double UpdateNode_NodeData::x() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.UpdateNode.NodeData.x)
  return _internal_x();
}
inline void UpdateNode_NodeData::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.UpdateNode.NodeData.x)
}
inline double UpdateNode_NodeData::_internal_x() const {
  return _impl_.x_;
}
inline void UpdateNode_NodeData::_internal_set_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}

// required double y = 3;
inline bool UpdateNode_NodeData::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UpdateNode_NodeData::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double UpdateNode_NodeData::y() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.UpdateNode.NodeData.y)
  return _internal_y();
}
inline void UpdateNode_NodeData::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.UpdateNode.NodeData.y)
}
inline double UpdateNode_NodeData::_internal_y() const {
  return _impl_.y_;
}
inline void UpdateNode_NodeData::_internal_set_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// UpdateNode

// required .ClientServerChannelSpace.UpdateNode.UpdateType update_type = 1;
inline bool UpdateNode::has_update_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UpdateNode::clear_update_type() {
  _impl_.update_type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ClientServerChannelSpace::UpdateNode_UpdateType UpdateNode::update_type() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.UpdateNode.update_type)
  return _internal_update_type();
}
inline void UpdateNode::set_update_type(::ClientServerChannelSpace::UpdateNode_UpdateType value) {
   _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.UpdateNode.update_type)
}
inline ::ClientServerChannelSpace::UpdateNode_UpdateType UpdateNode::_internal_update_type() const {
  return static_cast<::ClientServerChannelSpace::UpdateNode_UpdateType>(_impl_.update_type_);
}
inline void UpdateNode::_internal_set_update_type(::ClientServerChannelSpace::UpdateNode_UpdateType value) {
  assert(::ClientServerChannelSpace::UpdateNode_UpdateType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.update_type_ = value;
}

// required int64 time = 2;
inline bool UpdateNode::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UpdateNode::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t UpdateNode::time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.UpdateNode.time)
  return _internal_time();
}
inline void UpdateNode::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.UpdateNode.time)
}
inline ::int64_t UpdateNode::_internal_time() const {
  return _impl_.time_;
}
inline void UpdateNode::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}

// repeated .ClientServerChannelSpace.UpdateNode.NodeData properties = 3;
inline int UpdateNode::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int UpdateNode::properties_size() const {
  return _internal_properties_size();
}
inline void UpdateNode::clear_properties() {
  _internal_mutable_properties()->Clear();
}
inline ::ClientServerChannelSpace::UpdateNode_NodeData* UpdateNode::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:ClientServerChannelSpace.UpdateNode.properties)
  return _internal_mutable_properties()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerChannelSpace::UpdateNode_NodeData >*
UpdateNode::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:ClientServerChannelSpace.UpdateNode.properties)
  return _internal_mutable_properties();
}
inline const ::ClientServerChannelSpace::UpdateNode_NodeData& UpdateNode::_internal_properties(int index) const {
  return _internal_properties().Get(index);
}
inline const ::ClientServerChannelSpace::UpdateNode_NodeData& UpdateNode::properties(int index) const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.UpdateNode.properties)
  return _internal_properties(index);
}
inline ::ClientServerChannelSpace::UpdateNode_NodeData* UpdateNode::_internal_add_properties() {
  return _internal_mutable_properties()->Add();
}
inline ::ClientServerChannelSpace::UpdateNode_NodeData* UpdateNode::add_properties() {
  ::ClientServerChannelSpace::UpdateNode_NodeData* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:ClientServerChannelSpace.UpdateNode.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ClientServerChannelSpace::UpdateNode_NodeData >&
UpdateNode::properties() const {
  // @@protoc_insertion_point(field_list:ClientServerChannelSpace.UpdateNode.properties)
  return _internal_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ClientServerChannelSpace::UpdateNode_NodeData>&
UpdateNode::_internal_properties() const {
  return _impl_.properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ClientServerChannelSpace::UpdateNode_NodeData>*
UpdateNode::_internal_mutable_properties() {
  return &_impl_.properties_;
}

// -------------------------------------------------------------------

// InitMessage

// required int64 start_time = 1;
inline bool InitMessage::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InitMessage::clear_start_time() {
  _impl_.start_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t InitMessage::start_time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.InitMessage.start_time)
  return _internal_start_time();
}
inline void InitMessage::set_start_time(::int64_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.InitMessage.start_time)
}
inline ::int64_t InitMessage::_internal_start_time() const {
  return _impl_.start_time_;
}
inline void InitMessage::_internal_set_start_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.start_time_ = value;
}

// required int64 end_time = 2;
inline bool InitMessage::has_end_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InitMessage::clear_end_time() {
  _impl_.end_time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t InitMessage::end_time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.InitMessage.end_time)
  return _internal_end_time();
}
inline void InitMessage::set_end_time(::int64_t value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.InitMessage.end_time)
}
inline ::int64_t InitMessage::_internal_end_time() const {
  return _impl_.end_time_;
}
inline void InitMessage::_internal_set_end_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.end_time_ = value;
}

// -------------------------------------------------------------------

// PortExchange

// required uint32 port_number = 1;
inline bool PortExchange::has_port_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PortExchange::clear_port_number() {
  _impl_.port_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t PortExchange::port_number() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.PortExchange.port_number)
  return _internal_port_number();
}
inline void PortExchange::set_port_number(::uint32_t value) {
  _internal_set_port_number(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.PortExchange.port_number)
}
inline ::uint32_t PortExchange::_internal_port_number() const {
  return _impl_.port_number_;
}
inline void PortExchange::_internal_set_port_number(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.port_number_ = value;
}

// -------------------------------------------------------------------

// TimeMessage

// required int64 time = 1;
inline bool TimeMessage::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TimeMessage::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t TimeMessage::time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.TimeMessage.time)
  return _internal_time();
}
inline void TimeMessage::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.TimeMessage.time)
}
inline ::int64_t TimeMessage::_internal_time() const {
  return _impl_.time_;
}
inline void TimeMessage::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}

// -------------------------------------------------------------------

// ReceiveMessage

// required int64 time = 1;
inline bool ReceiveMessage::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ReceiveMessage::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t ReceiveMessage::time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ReceiveMessage.time)
  return _internal_time();
}
inline void ReceiveMessage::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ReceiveMessage.time)
}
inline ::int64_t ReceiveMessage::_internal_time() const {
  return _impl_.time_;
}
inline void ReceiveMessage::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}

// required uint32 node_id = 2;
inline bool ReceiveMessage::has_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ReceiveMessage::clear_node_id() {
  _impl_.node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ReceiveMessage::node_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ReceiveMessage.node_id)
  return _internal_node_id();
}
inline void ReceiveMessage::set_node_id(::uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ReceiveMessage.node_id)
}
inline ::uint32_t ReceiveMessage::_internal_node_id() const {
  return _impl_.node_id_;
}
inline void ReceiveMessage::_internal_set_node_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.node_id_ = value;
}

// required .ClientServerChannelSpace.RadioChannel channel_id = 3;
inline bool ReceiveMessage::has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ReceiveMessage::clear_channel_id() {
  _impl_.channel_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ClientServerChannelSpace::RadioChannel ReceiveMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ReceiveMessage.channel_id)
  return _internal_channel_id();
}
inline void ReceiveMessage::set_channel_id(::ClientServerChannelSpace::RadioChannel value) {
   _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ReceiveMessage.channel_id)
}
inline ::ClientServerChannelSpace::RadioChannel ReceiveMessage::_internal_channel_id() const {
  return static_cast<::ClientServerChannelSpace::RadioChannel>(_impl_.channel_id_);
}
inline void ReceiveMessage::_internal_set_channel_id(::ClientServerChannelSpace::RadioChannel value) {
  assert(::ClientServerChannelSpace::RadioChannel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_id_ = value;
}

// required uint32 message_id = 4;
inline bool ReceiveMessage::has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ReceiveMessage::clear_message_id() {
  _impl_.message_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ReceiveMessage::message_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ReceiveMessage.message_id)
  return _internal_message_id();
}
inline void ReceiveMessage::set_message_id(::uint32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ReceiveMessage.message_id)
}
inline ::uint32_t ReceiveMessage::_internal_message_id() const {
  return _impl_.message_id_;
}
inline void ReceiveMessage::_internal_set_message_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.message_id_ = value;
}

// required float rssi = 5;
inline bool ReceiveMessage::has_rssi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ReceiveMessage::clear_rssi() {
  _impl_.rssi_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float ReceiveMessage::rssi() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ReceiveMessage.rssi)
  return _internal_rssi();
}
inline void ReceiveMessage::set_rssi(float value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ReceiveMessage.rssi)
}
inline float ReceiveMessage::_internal_rssi() const {
  return _impl_.rssi_;
}
inline void ReceiveMessage::_internal_set_rssi(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rssi_ = value;
}

// -------------------------------------------------------------------

// ConfigureRadioMessage_RadioConfiguration

// required bool receiving_messages = 1;
inline bool ConfigureRadioMessage_RadioConfiguration::has_receiving_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_receiving_messages() {
  _impl_.receiving_messages_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ConfigureRadioMessage_RadioConfiguration::receiving_messages() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.receiving_messages)
  return _internal_receiving_messages();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_receiving_messages(bool value) {
  _internal_set_receiving_messages(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.receiving_messages)
}
inline bool ConfigureRadioMessage_RadioConfiguration::_internal_receiving_messages() const {
  return _impl_.receiving_messages_;
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_receiving_messages(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.receiving_messages_ = value;
}

// required uint32 ip_address = 2;
inline bool ConfigureRadioMessage_RadioConfiguration::has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_ip_address() {
  _impl_.ip_address_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t ConfigureRadioMessage_RadioConfiguration::ip_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.ip_address)
  return _internal_ip_address();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_ip_address(::uint32_t value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.ip_address)
}
inline ::uint32_t ConfigureRadioMessage_RadioConfiguration::_internal_ip_address() const {
  return _impl_.ip_address_;
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_ip_address(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_address_ = value;
}

// required uint32 subnet_address = 3;
inline bool ConfigureRadioMessage_RadioConfiguration::has_subnet_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_subnet_address() {
  _impl_.subnet_address_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ConfigureRadioMessage_RadioConfiguration::subnet_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.subnet_address)
  return _internal_subnet_address();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_subnet_address(::uint32_t value) {
  _internal_set_subnet_address(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.subnet_address)
}
inline ::uint32_t ConfigureRadioMessage_RadioConfiguration::_internal_subnet_address() const {
  return _impl_.subnet_address_;
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_subnet_address(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.subnet_address_ = value;
}

// required double transmission_power = 4;
inline bool ConfigureRadioMessage_RadioConfiguration::has_transmission_power() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_transmission_power() {
  _impl_.transmission_power_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ConfigureRadioMessage_RadioConfiguration::transmission_power() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.transmission_power)
  return _internal_transmission_power();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_transmission_power(double value) {
  _internal_set_transmission_power(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.transmission_power)
}
inline double ConfigureRadioMessage_RadioConfiguration::_internal_transmission_power() const {
  return _impl_.transmission_power_;
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_transmission_power(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.transmission_power_ = value;
}

// required .ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.RadioMode radio_mode = 5;
inline bool ConfigureRadioMessage_RadioConfiguration::has_radio_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_radio_mode() {
  _impl_.radio_mode_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode ConfigureRadioMessage_RadioConfiguration::radio_mode() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.radio_mode)
  return _internal_radio_mode();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_radio_mode(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode value) {
   _internal_set_radio_mode(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.radio_mode)
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode ConfigureRadioMessage_RadioConfiguration::_internal_radio_mode() const {
  return static_cast<::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode>(_impl_.radio_mode_);
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_radio_mode(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode value) {
  assert(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.radio_mode_ = value;
}

// required .ClientServerChannelSpace.RadioChannel primary_radio_channel = 6;
inline bool ConfigureRadioMessage_RadioConfiguration::has_primary_radio_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_primary_radio_channel() {
  _impl_.primary_radio_channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::ClientServerChannelSpace::RadioChannel ConfigureRadioMessage_RadioConfiguration::primary_radio_channel() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.primary_radio_channel)
  return _internal_primary_radio_channel();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_primary_radio_channel(::ClientServerChannelSpace::RadioChannel value) {
   _internal_set_primary_radio_channel(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.primary_radio_channel)
}
inline ::ClientServerChannelSpace::RadioChannel ConfigureRadioMessage_RadioConfiguration::_internal_primary_radio_channel() const {
  return static_cast<::ClientServerChannelSpace::RadioChannel>(_impl_.primary_radio_channel_);
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_primary_radio_channel(::ClientServerChannelSpace::RadioChannel value) {
  assert(::ClientServerChannelSpace::RadioChannel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.primary_radio_channel_ = value;
}

// optional .ClientServerChannelSpace.RadioChannel secondary_radio_channel = 7;
inline bool ConfigureRadioMessage_RadioConfiguration::has_secondary_radio_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigureRadioMessage_RadioConfiguration::clear_secondary_radio_channel() {
  _impl_.secondary_radio_channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::ClientServerChannelSpace::RadioChannel ConfigureRadioMessage_RadioConfiguration::secondary_radio_channel() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.secondary_radio_channel)
  return _internal_secondary_radio_channel();
}
inline void ConfigureRadioMessage_RadioConfiguration::set_secondary_radio_channel(::ClientServerChannelSpace::RadioChannel value) {
   _internal_set_secondary_radio_channel(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration.secondary_radio_channel)
}
inline ::ClientServerChannelSpace::RadioChannel ConfigureRadioMessage_RadioConfiguration::_internal_secondary_radio_channel() const {
  return static_cast<::ClientServerChannelSpace::RadioChannel>(_impl_.secondary_radio_channel_);
}
inline void ConfigureRadioMessage_RadioConfiguration::_internal_set_secondary_radio_channel(::ClientServerChannelSpace::RadioChannel value) {
  assert(::ClientServerChannelSpace::RadioChannel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.secondary_radio_channel_ = value;
}

// -------------------------------------------------------------------

// ConfigureRadioMessage

// required int64 time = 1;
inline bool ConfigureRadioMessage::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConfigureRadioMessage::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t ConfigureRadioMessage::time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.time)
  return _internal_time();
}
inline void ConfigureRadioMessage::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.time)
}
inline ::int64_t ConfigureRadioMessage::_internal_time() const {
  return _impl_.time_;
}
inline void ConfigureRadioMessage::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_ = value;
}

// required uint32 message_id = 2;
inline bool ConfigureRadioMessage::has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConfigureRadioMessage::clear_message_id() {
  _impl_.message_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ConfigureRadioMessage::message_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.message_id)
  return _internal_message_id();
}
inline void ConfigureRadioMessage::set_message_id(::uint32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.message_id)
}
inline ::uint32_t ConfigureRadioMessage::_internal_message_id() const {
  return _impl_.message_id_;
}
inline void ConfigureRadioMessage::_internal_set_message_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.message_id_ = value;
}

// required uint32 external_id = 3;
inline bool ConfigureRadioMessage::has_external_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConfigureRadioMessage::clear_external_id() {
  _impl_.external_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t ConfigureRadioMessage::external_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.external_id)
  return _internal_external_id();
}
inline void ConfigureRadioMessage::set_external_id(::uint32_t value) {
  _internal_set_external_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.external_id)
}
inline ::uint32_t ConfigureRadioMessage::_internal_external_id() const {
  return _impl_.external_id_;
}
inline void ConfigureRadioMessage::_internal_set_external_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.external_id_ = value;
}

// required .ClientServerChannelSpace.ConfigureRadioMessage.RadioNumber radio_number = 4;
inline bool ConfigureRadioMessage::has_radio_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConfigureRadioMessage::clear_radio_number() {
  _impl_.radio_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber ConfigureRadioMessage::radio_number() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.radio_number)
  return _internal_radio_number();
}
inline void ConfigureRadioMessage::set_radio_number(::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber value) {
   _internal_set_radio_number(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.ConfigureRadioMessage.radio_number)
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber ConfigureRadioMessage::_internal_radio_number() const {
  return static_cast<::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber>(_impl_.radio_number_);
}
inline void ConfigureRadioMessage::_internal_set_radio_number(::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber value) {
  assert(::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.radio_number_ = value;
}

// required .ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration primary_radio_configuration = 5;
inline bool ConfigureRadioMessage::has_primary_radio_configuration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.primary_radio_configuration_ != nullptr);
  return value;
}
inline void ConfigureRadioMessage::clear_primary_radio_configuration() {
  if (_impl_.primary_radio_configuration_ != nullptr) _impl_.primary_radio_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& ConfigureRadioMessage::_internal_primary_radio_configuration() const {
  const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* p = _impl_.primary_radio_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration&>(
      ::ClientServerChannelSpace::_ConfigureRadioMessage_RadioConfiguration_default_instance_);
}
inline const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& ConfigureRadioMessage::primary_radio_configuration() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.primary_radio_configuration)
  return _internal_primary_radio_configuration();
}
inline void ConfigureRadioMessage::unsafe_arena_set_allocated_primary_radio_configuration(
    ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* primary_radio_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.primary_radio_configuration_);
  }
  _impl_.primary_radio_configuration_ = primary_radio_configuration;
  if (primary_radio_configuration) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerChannelSpace.ConfigureRadioMessage.primary_radio_configuration)
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::release_primary_radio_configuration() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* temp = _impl_.primary_radio_configuration_;
  _impl_.primary_radio_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::unsafe_arena_release_primary_radio_configuration() {
  // @@protoc_insertion_point(field_release:ClientServerChannelSpace.ConfigureRadioMessage.primary_radio_configuration)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* temp = _impl_.primary_radio_configuration_;
  _impl_.primary_radio_configuration_ = nullptr;
  return temp;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::_internal_mutable_primary_radio_configuration() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.primary_radio_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration>(GetArenaForAllocation());
    _impl_.primary_radio_configuration_ = p;
  }
  return _impl_.primary_radio_configuration_;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::mutable_primary_radio_configuration() {
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* _msg = _internal_mutable_primary_radio_configuration();
  // @@protoc_insertion_point(field_mutable:ClientServerChannelSpace.ConfigureRadioMessage.primary_radio_configuration)
  return _msg;
}
inline void ConfigureRadioMessage::set_allocated_primary_radio_configuration(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* primary_radio_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.primary_radio_configuration_;
  }
  if (primary_radio_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(primary_radio_configuration);
    if (message_arena != submessage_arena) {
      primary_radio_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, primary_radio_configuration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.primary_radio_configuration_ = primary_radio_configuration;
  // @@protoc_insertion_point(field_set_allocated:ClientServerChannelSpace.ConfigureRadioMessage.primary_radio_configuration)
}

// optional .ClientServerChannelSpace.ConfigureRadioMessage.RadioConfiguration secondary_radio_configuration = 6;
inline bool ConfigureRadioMessage::has_secondary_radio_configuration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.secondary_radio_configuration_ != nullptr);
  return value;
}
inline void ConfigureRadioMessage::clear_secondary_radio_configuration() {
  if (_impl_.secondary_radio_configuration_ != nullptr) _impl_.secondary_radio_configuration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& ConfigureRadioMessage::_internal_secondary_radio_configuration() const {
  const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* p = _impl_.secondary_radio_configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration&>(
      ::ClientServerChannelSpace::_ConfigureRadioMessage_RadioConfiguration_default_instance_);
}
inline const ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration& ConfigureRadioMessage::secondary_radio_configuration() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.ConfigureRadioMessage.secondary_radio_configuration)
  return _internal_secondary_radio_configuration();
}
inline void ConfigureRadioMessage::unsafe_arena_set_allocated_secondary_radio_configuration(
    ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* secondary_radio_configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.secondary_radio_configuration_);
  }
  _impl_.secondary_radio_configuration_ = secondary_radio_configuration;
  if (secondary_radio_configuration) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerChannelSpace.ConfigureRadioMessage.secondary_radio_configuration)
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::release_secondary_radio_configuration() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* temp = _impl_.secondary_radio_configuration_;
  _impl_.secondary_radio_configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::unsafe_arena_release_secondary_radio_configuration() {
  // @@protoc_insertion_point(field_release:ClientServerChannelSpace.ConfigureRadioMessage.secondary_radio_configuration)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* temp = _impl_.secondary_radio_configuration_;
  _impl_.secondary_radio_configuration_ = nullptr;
  return temp;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::_internal_mutable_secondary_radio_configuration() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.secondary_radio_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration>(GetArenaForAllocation());
    _impl_.secondary_radio_configuration_ = p;
  }
  return _impl_.secondary_radio_configuration_;
}
inline ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* ConfigureRadioMessage::mutable_secondary_radio_configuration() {
  ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* _msg = _internal_mutable_secondary_radio_configuration();
  // @@protoc_insertion_point(field_mutable:ClientServerChannelSpace.ConfigureRadioMessage.secondary_radio_configuration)
  return _msg;
}
inline void ConfigureRadioMessage::set_allocated_secondary_radio_configuration(::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration* secondary_radio_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.secondary_radio_configuration_;
  }
  if (secondary_radio_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(secondary_radio_configuration);
    if (message_arena != submessage_arena) {
      secondary_radio_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_radio_configuration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.secondary_radio_configuration_ = secondary_radio_configuration;
  // @@protoc_insertion_point(field_set_allocated:ClientServerChannelSpace.ConfigureRadioMessage.secondary_radio_configuration)
}

// -------------------------------------------------------------------

// SendMessageMessage_TopoAddress

// required uint32 ip_address = 1;
inline bool SendMessageMessage_TopoAddress::has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendMessageMessage_TopoAddress::clear_ip_address() {
  _impl_.ip_address_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SendMessageMessage_TopoAddress::ip_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.TopoAddress.ip_address)
  return _internal_ip_address();
}
inline void SendMessageMessage_TopoAddress::set_ip_address(::uint32_t value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.TopoAddress.ip_address)
}
inline ::uint32_t SendMessageMessage_TopoAddress::_internal_ip_address() const {
  return _impl_.ip_address_;
}
inline void SendMessageMessage_TopoAddress::_internal_set_ip_address(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_address_ = value;
}

// required uint32 ttl = 2;
inline bool SendMessageMessage_TopoAddress::has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SendMessageMessage_TopoAddress::clear_ttl() {
  _impl_.ttl_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SendMessageMessage_TopoAddress::ttl() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.TopoAddress.ttl)
  return _internal_ttl();
}
inline void SendMessageMessage_TopoAddress::set_ttl(::uint32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.TopoAddress.ttl)
}
inline ::uint32_t SendMessageMessage_TopoAddress::_internal_ttl() const {
  return _impl_.ttl_;
}
inline void SendMessageMessage_TopoAddress::_internal_set_ttl(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ttl_ = value;
}

// -------------------------------------------------------------------

// SendMessageMessage_GeoRectangleAddress

// required uint32 ip_address = 1;
inline bool SendMessageMessage_GeoRectangleAddress::has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SendMessageMessage_GeoRectangleAddress::clear_ip_address() {
  _impl_.ip_address_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SendMessageMessage_GeoRectangleAddress::ip_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.ip_address)
  return _internal_ip_address();
}
inline void SendMessageMessage_GeoRectangleAddress::set_ip_address(::uint32_t value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.ip_address)
}
inline ::uint32_t SendMessageMessage_GeoRectangleAddress::_internal_ip_address() const {
  return _impl_.ip_address_;
}
inline void SendMessageMessage_GeoRectangleAddress::_internal_set_ip_address(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ip_address_ = value;
}

// required double a_X = 2;
inline bool SendMessageMessage_GeoRectangleAddress::has_a_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendMessageMessage_GeoRectangleAddress::clear_a_x() {
  _impl_.a_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SendMessageMessage_GeoRectangleAddress::a_x() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.a_X)
  return _internal_a_x();
}
inline void SendMessageMessage_GeoRectangleAddress::set_a_x(double value) {
  _internal_set_a_x(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.a_X)
}
inline double SendMessageMessage_GeoRectangleAddress::_internal_a_x() const {
  return _impl_.a_x_;
}
inline void SendMessageMessage_GeoRectangleAddress::_internal_set_a_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.a_x_ = value;
}

// required double a_Y = 3;
inline bool SendMessageMessage_GeoRectangleAddress::has_a_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SendMessageMessage_GeoRectangleAddress::clear_a_y() {
  _impl_.a_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SendMessageMessage_GeoRectangleAddress::a_y() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.a_Y)
  return _internal_a_y();
}
inline void SendMessageMessage_GeoRectangleAddress::set_a_y(double value) {
  _internal_set_a_y(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.a_Y)
}
inline double SendMessageMessage_GeoRectangleAddress::_internal_a_y() const {
  return _impl_.a_y_;
}
inline void SendMessageMessage_GeoRectangleAddress::_internal_set_a_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.a_y_ = value;
}

// required double b_X = 4;
inline bool SendMessageMessage_GeoRectangleAddress::has_b_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SendMessageMessage_GeoRectangleAddress::clear_b_x() {
  _impl_.b_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SendMessageMessage_GeoRectangleAddress::b_x() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.b_X)
  return _internal_b_x();
}
inline void SendMessageMessage_GeoRectangleAddress::set_b_x(double value) {
  _internal_set_b_x(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.b_X)
}
inline double SendMessageMessage_GeoRectangleAddress::_internal_b_x() const {
  return _impl_.b_x_;
}
inline void SendMessageMessage_GeoRectangleAddress::_internal_set_b_x(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.b_x_ = value;
}

// required double b_Y = 5;
inline bool SendMessageMessage_GeoRectangleAddress::has_b_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SendMessageMessage_GeoRectangleAddress::clear_b_y() {
  _impl_.b_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double SendMessageMessage_GeoRectangleAddress::b_y() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.b_Y)
  return _internal_b_y();
}
inline void SendMessageMessage_GeoRectangleAddress::set_b_y(double value) {
  _internal_set_b_y(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress.b_Y)
}
inline double SendMessageMessage_GeoRectangleAddress::_internal_b_y() const {
  return _impl_.b_y_;
}
inline void SendMessageMessage_GeoRectangleAddress::_internal_set_b_y(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.b_y_ = value;
}

// -------------------------------------------------------------------

// SendMessageMessage_GeoCircleAddress

// required uint32 ip_address = 1;
inline bool SendMessageMessage_GeoCircleAddress::has_ip_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SendMessageMessage_GeoCircleAddress::clear_ip_address() {
  _impl_.ip_address_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t SendMessageMessage_GeoCircleAddress::ip_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.ip_address)
  return _internal_ip_address();
}
inline void SendMessageMessage_GeoCircleAddress::set_ip_address(::uint32_t value) {
  _internal_set_ip_address(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.ip_address)
}
inline ::uint32_t SendMessageMessage_GeoCircleAddress::_internal_ip_address() const {
  return _impl_.ip_address_;
}
inline void SendMessageMessage_GeoCircleAddress::_internal_set_ip_address(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ip_address_ = value;
}

// required double center_X = 2;
inline bool SendMessageMessage_GeoCircleAddress::has_center_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendMessageMessage_GeoCircleAddress::clear_center_x() {
  _impl_.center_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SendMessageMessage_GeoCircleAddress::center_x() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.center_X)
  return _internal_center_x();
}
inline void SendMessageMessage_GeoCircleAddress::set_center_x(double value) {
  _internal_set_center_x(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.center_X)
}
inline double SendMessageMessage_GeoCircleAddress::_internal_center_x() const {
  return _impl_.center_x_;
}
inline void SendMessageMessage_GeoCircleAddress::_internal_set_center_x(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.center_x_ = value;
}

// required double center_Y = 3;
inline bool SendMessageMessage_GeoCircleAddress::has_center_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SendMessageMessage_GeoCircleAddress::clear_center_y() {
  _impl_.center_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SendMessageMessage_GeoCircleAddress::center_y() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.center_Y)
  return _internal_center_y();
}
inline void SendMessageMessage_GeoCircleAddress::set_center_y(double value) {
  _internal_set_center_y(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.center_Y)
}
inline double SendMessageMessage_GeoCircleAddress::_internal_center_y() const {
  return _impl_.center_y_;
}
inline void SendMessageMessage_GeoCircleAddress::_internal_set_center_y(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.center_y_ = value;
}

// required double radius = 4;
inline bool SendMessageMessage_GeoCircleAddress::has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SendMessageMessage_GeoCircleAddress::clear_radius() {
  _impl_.radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SendMessageMessage_GeoCircleAddress::radius() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.radius)
  return _internal_radius();
}
inline void SendMessageMessage_GeoCircleAddress::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress.radius)
}
inline double SendMessageMessage_GeoCircleAddress::_internal_radius() const {
  return _impl_.radius_;
}
inline void SendMessageMessage_GeoCircleAddress::_internal_set_radius(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.radius_ = value;
}

// -------------------------------------------------------------------

// SendMessageMessage

// required int64 time = 1;
inline bool SendMessageMessage::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendMessageMessage::clear_time() {
  _impl_.time_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t SendMessageMessage::time() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.time)
  return _internal_time();
}
inline void SendMessageMessage::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.time)
}
inline ::int64_t SendMessageMessage::_internal_time() const {
  return _impl_.time_;
}
inline void SendMessageMessage::_internal_set_time(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_ = value;
}

// required uint32 node_id = 2;
inline bool SendMessageMessage::has_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SendMessageMessage::clear_node_id() {
  _impl_.node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SendMessageMessage::node_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.node_id)
  return _internal_node_id();
}
inline void SendMessageMessage::set_node_id(::uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.node_id)
}
inline ::uint32_t SendMessageMessage::_internal_node_id() const {
  return _impl_.node_id_;
}
inline void SendMessageMessage::_internal_set_node_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.node_id_ = value;
}

// required .ClientServerChannelSpace.RadioChannel channel_id = 3;
inline bool SendMessageMessage::has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SendMessageMessage::clear_channel_id() {
  _impl_.channel_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ClientServerChannelSpace::RadioChannel SendMessageMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.channel_id)
  return _internal_channel_id();
}
inline void SendMessageMessage::set_channel_id(::ClientServerChannelSpace::RadioChannel value) {
   _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.channel_id)
}
inline ::ClientServerChannelSpace::RadioChannel SendMessageMessage::_internal_channel_id() const {
  return static_cast<::ClientServerChannelSpace::RadioChannel>(_impl_.channel_id_);
}
inline void SendMessageMessage::_internal_set_channel_id(::ClientServerChannelSpace::RadioChannel value) {
  assert(::ClientServerChannelSpace::RadioChannel_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_id_ = value;
}

// required uint32 message_id = 4;
inline bool SendMessageMessage::has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void SendMessageMessage::clear_message_id() {
  _impl_.message_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t SendMessageMessage::message_id() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.message_id)
  return _internal_message_id();
}
inline void SendMessageMessage::set_message_id(::uint32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.message_id)
}
inline ::uint32_t SendMessageMessage::_internal_message_id() const {
  return _impl_.message_id_;
}
inline void SendMessageMessage::_internal_set_message_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.message_id_ = value;
}

// required uint64 length = 5;
inline bool SendMessageMessage::has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SendMessageMessage::clear_length() {
  _impl_.length_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t SendMessageMessage::length() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.length)
  return _internal_length();
}
inline void SendMessageMessage::set_length(::uint64_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:ClientServerChannelSpace.SendMessageMessage.length)
}
inline ::uint64_t SendMessageMessage::_internal_length() const {
  return _impl_.length_;
}
inline void SendMessageMessage::_internal_set_length(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.length_ = value;
}

// .ClientServerChannelSpace.SendMessageMessage.TopoAddress topo_address = 6;
inline bool SendMessageMessage::has_topo_address() const {
  return address_case() == kTopoAddress;
}
inline bool SendMessageMessage::_internal_has_topo_address() const {
  return address_case() == kTopoAddress;
}
inline void SendMessageMessage::set_has_topo_address() {
  _impl_._oneof_case_[0] = kTopoAddress;
}
inline void SendMessageMessage::clear_topo_address() {
  if (address_case() == kTopoAddress) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.address_.topo_address_;
    }
    clear_has_address();
  }
}
inline ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* SendMessageMessage::release_topo_address() {
  // @@protoc_insertion_point(field_release:ClientServerChannelSpace.SendMessageMessage.topo_address)
  if (address_case() == kTopoAddress) {
    clear_has_address();
    ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* temp = _impl_.address_.topo_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.address_.topo_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientServerChannelSpace::SendMessageMessage_TopoAddress& SendMessageMessage::_internal_topo_address() const {
  return address_case() == kTopoAddress
      ? *_impl_.address_.topo_address_
      : reinterpret_cast<::ClientServerChannelSpace::SendMessageMessage_TopoAddress&>(::ClientServerChannelSpace::_SendMessageMessage_TopoAddress_default_instance_);
}
inline const ::ClientServerChannelSpace::SendMessageMessage_TopoAddress& SendMessageMessage::topo_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.topo_address)
  return _internal_topo_address();
}
inline ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* SendMessageMessage::unsafe_arena_release_topo_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientServerChannelSpace.SendMessageMessage.topo_address)
  if (address_case() == kTopoAddress) {
    clear_has_address();
    ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* temp = _impl_.address_.topo_address_;
    _impl_.address_.topo_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendMessageMessage::unsafe_arena_set_allocated_topo_address(::ClientServerChannelSpace::SendMessageMessage_TopoAddress* topo_address) {
  clear_address();
  if (topo_address) {
    set_has_topo_address();
    _impl_.address_.topo_address_ = topo_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerChannelSpace.SendMessageMessage.topo_address)
}
inline ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* SendMessageMessage::_internal_mutable_topo_address() {
  if (address_case() != kTopoAddress) {
    clear_address();
    set_has_topo_address();
    _impl_.address_.topo_address_ = CreateMaybeMessage< ::ClientServerChannelSpace::SendMessageMessage_TopoAddress >(GetArenaForAllocation());
  }
  return _impl_.address_.topo_address_;
}
inline ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* SendMessageMessage::mutable_topo_address() {
  ::ClientServerChannelSpace::SendMessageMessage_TopoAddress* _msg = _internal_mutable_topo_address();
  // @@protoc_insertion_point(field_mutable:ClientServerChannelSpace.SendMessageMessage.topo_address)
  return _msg;
}

// .ClientServerChannelSpace.SendMessageMessage.GeoRectangleAddress rectangle_address = 7;
inline bool SendMessageMessage::has_rectangle_address() const {
  return address_case() == kRectangleAddress;
}
inline bool SendMessageMessage::_internal_has_rectangle_address() const {
  return address_case() == kRectangleAddress;
}
inline void SendMessageMessage::set_has_rectangle_address() {
  _impl_._oneof_case_[0] = kRectangleAddress;
}
inline void SendMessageMessage::clear_rectangle_address() {
  if (address_case() == kRectangleAddress) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.address_.rectangle_address_;
    }
    clear_has_address();
  }
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* SendMessageMessage::release_rectangle_address() {
  // @@protoc_insertion_point(field_release:ClientServerChannelSpace.SendMessageMessage.rectangle_address)
  if (address_case() == kRectangleAddress) {
    clear_has_address();
    ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* temp = _impl_.address_.rectangle_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.address_.rectangle_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress& SendMessageMessage::_internal_rectangle_address() const {
  return address_case() == kRectangleAddress
      ? *_impl_.address_.rectangle_address_
      : reinterpret_cast<::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress&>(::ClientServerChannelSpace::_SendMessageMessage_GeoRectangleAddress_default_instance_);
}
inline const ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress& SendMessageMessage::rectangle_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.rectangle_address)
  return _internal_rectangle_address();
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* SendMessageMessage::unsafe_arena_release_rectangle_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientServerChannelSpace.SendMessageMessage.rectangle_address)
  if (address_case() == kRectangleAddress) {
    clear_has_address();
    ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* temp = _impl_.address_.rectangle_address_;
    _impl_.address_.rectangle_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendMessageMessage::unsafe_arena_set_allocated_rectangle_address(::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* rectangle_address) {
  clear_address();
  if (rectangle_address) {
    set_has_rectangle_address();
    _impl_.address_.rectangle_address_ = rectangle_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerChannelSpace.SendMessageMessage.rectangle_address)
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* SendMessageMessage::_internal_mutable_rectangle_address() {
  if (address_case() != kRectangleAddress) {
    clear_address();
    set_has_rectangle_address();
    _impl_.address_.rectangle_address_ = CreateMaybeMessage< ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress >(GetArenaForAllocation());
  }
  return _impl_.address_.rectangle_address_;
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* SendMessageMessage::mutable_rectangle_address() {
  ::ClientServerChannelSpace::SendMessageMessage_GeoRectangleAddress* _msg = _internal_mutable_rectangle_address();
  // @@protoc_insertion_point(field_mutable:ClientServerChannelSpace.SendMessageMessage.rectangle_address)
  return _msg;
}

// .ClientServerChannelSpace.SendMessageMessage.GeoCircleAddress circle_address = 8;
inline bool SendMessageMessage::has_circle_address() const {
  return address_case() == kCircleAddress;
}
inline bool SendMessageMessage::_internal_has_circle_address() const {
  return address_case() == kCircleAddress;
}
inline void SendMessageMessage::set_has_circle_address() {
  _impl_._oneof_case_[0] = kCircleAddress;
}
inline void SendMessageMessage::clear_circle_address() {
  if (address_case() == kCircleAddress) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.address_.circle_address_;
    }
    clear_has_address();
  }
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* SendMessageMessage::release_circle_address() {
  // @@protoc_insertion_point(field_release:ClientServerChannelSpace.SendMessageMessage.circle_address)
  if (address_case() == kCircleAddress) {
    clear_has_address();
    ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* temp = _impl_.address_.circle_address_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.address_.circle_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress& SendMessageMessage::_internal_circle_address() const {
  return address_case() == kCircleAddress
      ? *_impl_.address_.circle_address_
      : reinterpret_cast<::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress&>(::ClientServerChannelSpace::_SendMessageMessage_GeoCircleAddress_default_instance_);
}
inline const ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress& SendMessageMessage::circle_address() const {
  // @@protoc_insertion_point(field_get:ClientServerChannelSpace.SendMessageMessage.circle_address)
  return _internal_circle_address();
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* SendMessageMessage::unsafe_arena_release_circle_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ClientServerChannelSpace.SendMessageMessage.circle_address)
  if (address_case() == kCircleAddress) {
    clear_has_address();
    ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* temp = _impl_.address_.circle_address_;
    _impl_.address_.circle_address_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SendMessageMessage::unsafe_arena_set_allocated_circle_address(::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* circle_address) {
  clear_address();
  if (circle_address) {
    set_has_circle_address();
    _impl_.address_.circle_address_ = circle_address;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ClientServerChannelSpace.SendMessageMessage.circle_address)
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* SendMessageMessage::_internal_mutable_circle_address() {
  if (address_case() != kCircleAddress) {
    clear_address();
    set_has_circle_address();
    _impl_.address_.circle_address_ = CreateMaybeMessage< ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress >(GetArenaForAllocation());
  }
  return _impl_.address_.circle_address_;
}
inline ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* SendMessageMessage::mutable_circle_address() {
  ::ClientServerChannelSpace::SendMessageMessage_GeoCircleAddress* _msg = _internal_mutable_circle_address();
  // @@protoc_insertion_point(field_mutable:ClientServerChannelSpace.SendMessageMessage.circle_address)
  return _msg;
}

inline bool SendMessageMessage::has_address() const {
  return address_case() != ADDRESS_NOT_SET;
}
inline void SendMessageMessage::clear_has_address() {
  _impl_._oneof_case_[0] = ADDRESS_NOT_SET;
}
inline SendMessageMessage::AddressCase SendMessageMessage::address_case() const {
  return SendMessageMessage::AddressCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ClientServerChannelSpace


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::ClientServerChannelSpace::CommandMessage_CommandType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ClientServerChannelSpace::CommandMessage_CommandType>() {
  return ::ClientServerChannelSpace::CommandMessage_CommandType_descriptor();
}
template <>
struct is_proto_enum<::ClientServerChannelSpace::UpdateNode_UpdateType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ClientServerChannelSpace::UpdateNode_UpdateType>() {
  return ::ClientServerChannelSpace::UpdateNode_UpdateType_descriptor();
}
template <>
struct is_proto_enum<::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode>() {
  return ::ClientServerChannelSpace::ConfigureRadioMessage_RadioConfiguration_RadioMode_descriptor();
}
template <>
struct is_proto_enum<::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber>() {
  return ::ClientServerChannelSpace::ConfigureRadioMessage_RadioNumber_descriptor();
}
template <>
struct is_proto_enum<::ClientServerChannelSpace::RadioChannel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ClientServerChannelSpace::RadioChannel>() {
  return ::ClientServerChannelSpace::RadioChannel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ClientServerChannelMessages_2eproto_2epb_2eh
